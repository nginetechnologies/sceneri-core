MakeStaticModule(Renderer ${CMAKE_CURRENT_LIST_DIR} Renderer)

include("${ENGINE_CMAKE_DIRECTORY}/DeployBinaryDependencies.cmake")

set_target_properties(Renderer PROPERTIES FOLDER Engine)
target_link_libraries(Renderer PUBLIC CommonAPI EngineAPI)

set(SUPPORTED_RENDERERS "")
set(DEFAULT_RENDERER "")

if (${PLATFORM_APPLE_MACOS})
	set(DEFAULT_RENDERER "Metal")
endif()

if((${PLATFORM_APPLE} AND NOT ${PLATFORM_APPLE_VISIONOS}) OR ${PLATFORM_WINDOWS} OR ${PLATFORM_ANDROID} OR ${PLATFORM_LINUX})
	set(PLATFORM_SUPPORTS_VULKAN_RENDERER 1)
	list(APPEND SUPPORTED_RENDERERS "Vulkan")
	if(DEFAULT_RENDERER STREQUAL "")
		set(DEFAULT_RENDERER "Vulkan")
	endif()
else()
	set(PLATFORM_SUPPORTS_VULKAN_RENDERER 0)
endif()

if(${PLATFORM_APPLE_VISIONOS} OR ${PLATFORM_APPLE_IOS} OR ${PLATFORM_APPLE_MACOS})
	set(PLATFORM_SUPPORTS_METAL_RENDERER 1)
	list(APPEND SUPPORTED_RENDERERS "Metal")

	if(DEFAULT_RENDERER STREQUAL "")
		set(DEFAULT_RENDERER "Metal")
	endif()
else()
	set(PLATFORM_SUPPORTS_METAL_RENDERER 0)
endif()

if(${PLATFORM_WINDOWS})
	set(PLATFORM_SUPPORTS_DIRECTX12_RENDERER 1)
else()
	set(PLATFORM_SUPPORTS_DIRECTX12_RENDERER 0)
endif()

if(${PLATFORM_WEB} OR ${PLATFORM_WINDOWS} OR ${PLATFORM_APPLE})
	set(PLATFORM_SUPPORTS_WEBGPU_RENDERER 1)
	list(APPEND SUPPORTED_RENDERERS "WebGPU")
	
	if(DEFAULT_RENDERER STREQUAL "")
		set(DEFAULT_RENDERER "WebGPU")
	endif()
else()
	set(PLATFORM_SUPPORTS_WEBGPU_RENDERER 0)
endif()

set(OPTION_RENDERER "${DEFAULT_RENDERER}" CACHE STRING "Selected Renderer")
set_property(CACHE OPTION_RENDERER PROPERTY STRINGS ${SUPPORTED_RENDERERS})

target_compile_definitions(Renderer PUBLIC PLATFORM_SUPPORTS_VULKAN_RENDERER=${PLATFORM_SUPPORTS_VULKAN_RENDERER})
target_compile_definitions(RendererAPI INTERFACE PLATFORM_SUPPORTS_VULKAN_RENDERER=${PLATFORM_SUPPORTS_VULKAN_RENDERER})
target_compile_definitions(Renderer PUBLIC PLATFORM_SUPPORTS_DIRECTX12_RENDERER=${PLATFORM_SUPPORTS_DIRECTX12_RENDERER})
target_compile_definitions(RendererAPI INTERFACE PLATFORM_SUPPORTS_DIRECTX12_RENDERER=${PLATFORM_SUPPORTS_DIRECTX12_RENDERER})
target_compile_definitions(Renderer PUBLIC PLATFORM_SUPPORTS_METAL_RENDERER=${PLATFORM_SUPPORTS_METAL_RENDERER})
target_compile_definitions(RendererAPI INTERFACE PLATFORM_SUPPORTS_METAL_RENDERER=${PLATFORM_SUPPORTS_METAL_RENDERER})
target_compile_definitions(Renderer PUBLIC PLATFORM_SUPPORTS_WEBGPU_RENDERER=${PLATFORM_SUPPORTS_WEBGPU_RENDERER})
target_compile_definitions(RendererAPI INTERFACE PLATFORM_SUPPORTS_WEBGPU_RENDERER=${PLATFORM_SUPPORTS_WEBGPU_RENDERER})

set(RENDERER_USING_METAL 0)
if(${OPTION_RENDERER} STREQUAL "Metal")
	set(RENDERER_METAL 1)
	set(RENDERER_USING_METAL 1)
else()
	set(RENDERER_METAL 0)
	set(RENDERER_USING_METAL 0)
endif()

if(${OPTION_RENDERER} STREQUAL "Vulkan")
	set(RENDERER_VULKAN 1)
else()
	set(RENDERER_VULKAN 0)
endif()

if(${OPTION_RENDERER} STREQUAL "WebGPU")
	set(RENDERER_WEBGPU 1)

	if(${PLATFORM_WEB})
		set(RENDERER_WEBGPU_DAWN 0)
		set(RENDERER_WEBGPU_WGPU_NATIVE 0)
	else()
		set(RENDERER_WEBGPU_DAWN 1)
		set(RENDERER_WEBGPU_WGPU_NATIVE 0)
	endif()
else()
	set(RENDERER_WEBGPU 0)
	set(RENDERER_WEBGPU_DAWN 0)
	set(RENDERER_WEBGPU_WGPU_NATIVE 0)
endif()

target_compile_definitions(Renderer PUBLIC RENDERER_USING_METAL=${RENDERER_USING_METAL})
target_compile_definitions(RendererAPI INTERFACE RENDERER_USING_METAL=${RENDERER_USING_METAL})

target_compile_definitions(Renderer PUBLIC RENDERER_VULKAN=${RENDERER_VULKAN})
target_compile_definitions(RendererAPI INTERFACE RENDERER_VULKAN=${RENDERER_VULKAN})
target_compile_definitions(Renderer PUBLIC RENDERER_METAL=${RENDERER_METAL})
target_compile_definitions(RendererAPI INTERFACE RENDERER_METAL=${RENDERER_METAL})
target_compile_definitions(Renderer PUBLIC RENDERER_WEBGPU=${RENDERER_WEBGPU})
target_compile_definitions(RendererAPI INTERFACE RENDERER_WEBGPU=${RENDERER_WEBGPU})
target_compile_definitions(Renderer PUBLIC RENDERER_WEBGPU_DAWN=${RENDERER_WEBGPU_DAWN})
target_compile_definitions(RendererAPI INTERFACE RENDERER_WEBGPU_DAWN=${RENDERER_WEBGPU_DAWN})
target_compile_definitions(Renderer PUBLIC RENDERER_WEBGPU_WGPU_NATIVE=${RENDERER_WEBGPU_WGPU_NATIVE})
target_compile_definitions(RendererAPI INTERFACE RENDERER_WEBGPU_WGPU_NATIVE=${RENDERER_WEBGPU_WGPU_NATIVE})

if(USE_SDL)
	if(PLATFORM_WINDOWS)
		set(SDL_SHARED_LIBRARY_SUFFIX "${CMAKE_STATIC_LIBRARY_SUFFIX}")
		set(SDL_CONFIG_PLATFORM "windows")
	elseif(PLATFORM_APPLE_MACOS)
		set(SDL_SHARED_LIBRARY_SUFFIX "${CMAKE_SHARED_LIBRARY_SUFFIX}")
		set(SDL_CONFIG_PLATFORM "macosx")
	elseif(PLATFORM_LINUX)
		set(SDL_SHARED_LIBRARY_SUFFIX "${CMAKE_SHARED_LIBRARY_SUFFIX}")
		set(SDL_CONFIG_PLATFORM "linux")
	endif()
endif()

if(RENDERER_VULKAN)
	if(PLATFORM_WINDOWS)
		set(VULKAN_SHARED_LIBRARY_SUFFIX "${CMAKE_STATIC_LIBRARY_SUFFIX}")
	elseif(PLATFORM_APPLE_MACOS)
		set(VULKAN_SHARED_LIBRARY_SUFFIX "${CMAKE_SHARED_LIBRARY_SUFFIX}")
	elseif(PLATFORM_APPLE_IOS)
		set(VULKAN_SHARED_LIBRARY_SUFFIX "${CMAKE_SHARED_LIBRARY_SUFFIX}")
	elseif(PLATFORM_APPLE_VISIONOS)
		set(VULKAN_SHARED_LIBRARY_SUFFIX "${CMAKE_SHARED_LIBRARY_SUFFIX}")
	elseif(PLATFORM_ANDROID)
		set(VULKAN_SHARED_LIBRARY_SUFFIX "${CMAKE_SHARED_LIBRARY_SUFFIX}")
	endif()

	if(PLATFORM_APPLE)
		target_link_libraries(Renderer PRIVATE "${CMAKE_CURRENT_LIST_DIR}/Public/Renderer/3rdparty/vulkan/lib/${PLATFORM_NAME}/${PLATFORM_ARCHITECTURE}/MoltenVK.framework/MoltenVK")
	elseif(PLATFORM_ANDROID)
		# Link to Vulkan
		target_link_libraries(Renderer PRIVATE "${CMAKE_SHARED_LIBRARY_PREFIX}vulkan${VULKAN_SHARED_LIBRARY_SUFFIX}")
	elseif(PLATFORM_LINUX)
		find_package(Vulkan REQUIRED)
		target_link_libraries(Renderer PRIVATE Vulkan::Vulkan)
	else()
		# Link to Vulkan
		target_link_libraries(Renderer PRIVATE "${CMAKE_CURRENT_LIST_DIR}/Public/Renderer/3rdparty/vulkan/lib/${PLATFORM_NAME}/${CMAKE_SHARED_LIBRARY_PREFIX}vulkan-1${VULKAN_SHARED_LIBRARY_SUFFIX}")
	endif()
elseif(RENDERER_METAL)
	set(SPIRV_CROSS_DIR "${CMAKE_CURRENT_LIST_DIR}/Private/3rdparty/SPIRVCross")
	set(SPIRV_CROSS_LIB_DIR "${SPIRV_CROSS_DIR}/lib/${PLATFORM_NAME}/${PLATFORM_ARCHITECTURE}")

	target_link_libraries(Renderer PRIVATE "${SPIRV_CROSS_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}spirv-cross-c${CMAKE_STATIC_LIBRARY_SUFFIX}")
	target_link_libraries(Renderer PRIVATE "${SPIRV_CROSS_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}spirv-cross-cpp${CMAKE_STATIC_LIBRARY_SUFFIX}")
	target_link_libraries(Renderer PRIVATE "${SPIRV_CROSS_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}spirv-cross-core${CMAKE_STATIC_LIBRARY_SUFFIX}")
	target_link_libraries(Renderer PRIVATE "${SPIRV_CROSS_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}spirv-cross-glsl${CMAKE_STATIC_LIBRARY_SUFFIX}")
	target_link_libraries(Renderer PRIVATE "${SPIRV_CROSS_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}spirv-cross-hlsl${CMAKE_STATIC_LIBRARY_SUFFIX}")
	target_link_libraries(Renderer PRIVATE "${SPIRV_CROSS_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}spirv-cross-msl${CMAKE_STATIC_LIBRARY_SUFFIX}")
	target_link_libraries(Renderer PRIVATE "${SPIRV_CROSS_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}spirv-cross-reflect${CMAKE_STATIC_LIBRARY_SUFFIX}")

	target_include_directories(Renderer PRIVATE "${SPIRV_CROSS_DIR}/include")
	target_include_directories(Renderer PRIVATE "${SPIRV_CROSS_DIR}/include/spirv_cross")
elseif(RENDERER_WEBGPU)
	if(NOT PLATFORM_WEB)
		if(${RENDERER_WEBGPU_DAWN})
			set(DAWN_DIR "${CMAKE_CURRENT_LIST_DIR}/Private/3rdparty/dawn")
			target_include_directories(Renderer PRIVATE "${DAWN_DIR}/include")
			target_link_libraries(Renderer PRIVATE "${DAWN_DIR}/lib/${PLATFORM_NAME}/${PLATFORM_ARCHITECTURE}/${CMAKE_STATIC_LIBRARY_PREFIX}webgpu_dawn${CMAKE_STATIC_LIBRARY_SUFFIX}")
			
			if(PLATFORM_WINDOWS)
				set_target_properties(Renderer PROPERTIES VS_DEBUGGER_ENVIRONMENT "DAWN_DEBUG_BREAK_ON_ERROR=1")
				target_link_libraries(Renderer PRIVATE dxguid)
			endif()
		else() # Use wgpu-native
			set(WGPU_NATIVE_DIR "${CMAKE_CURRENT_LIST_DIR}/Private/3rdparty/wgpu-native")
			target_include_directories(Renderer PRIVATE "${WGPU_NATIVE_DIR}/include")
			target_link_libraries(Renderer PRIVATE "${WGPU_NATIVE_DIR}/lib/${PLATFORM_NAME}/${PLATFORM_ARCHITECTURE}/${CMAKE_STATIC_LIBRARY_PREFIX}wgpu_native${CMAKE_STATIC_LIBRARY_SUFFIX}")
		
			if(PLATFORM_WINDOWS)
				target_link_libraries(Renderer PRIVATE ws2_32 iphlpapi userenv psapi NTDll Bcrypt Opengl32)
			endif()		
		endif()
	endif()

	if(${PLATFORM_SUPPORTS_VULKAN_RENDERER} AND NOT ${PLATFORM_APPLE})
		target_link_libraries(Renderer PRIVATE "${CMAKE_CURRENT_LIST_DIR}/Public/Renderer/3rdparty/vulkan/lib/${PLATFORM_NAME}/${CMAKE_STATIC_LIBRARY_PREFIX}vulkan-1${CMAKE_STATIC_LIBRARY_SUFFIX}")
	endif()

	if(${PLATFORM_SUPPORTS_DIRECTX12_RENDERER})
		target_link_libraries(Renderer PRIVATE d3d12.lib)
		target_link_libraries(Renderer PRIVATE dxgi.lib)
		target_link_libraries(Renderer PRIVATE d3dcompiler.lib)
	endif()
endif()

if(PLATFORM_APPLE)
	target_link_libraries(Renderer PRIVATE "-framework Metal")
	target_link_libraries(Renderer PRIVATE "-framework QuartzCore")
	target_link_libraries(Renderer PRIVATE "-framework CoreGraphics")
	target_link_libraries(Renderer PRIVATE "-framework CoreHaptics")
	target_link_libraries(Renderer PRIVATE "-framework GameController")
	target_link_libraries(Renderer PRIVATE "-framework Foundation")
	target_link_libraries(Renderer PRIVATE "-framework PassKit")
	target_link_libraries(Renderer PRIVATE "-framework Security")
	
	target_link_libraries(Renderer PRIVATE -lbz2)
endif()

if(PLATFORM_APPLE_IOS)
	target_link_libraries(Renderer PRIVATE "-framework UIKit")
	target_link_libraries(Renderer PRIVATE "-framework PassKit")
	target_link_libraries(Renderer PRIVATE "-framework AVFoundation")
	target_link_libraries(Renderer PRIVATE "-framework AudioToolbox")
	target_link_libraries(Renderer PRIVATE "-framework CoreMotion")
	target_link_libraries(Renderer PRIVATE "-framework IOKit")
	target_link_libraries(Renderer PRIVATE "-framework IOSurface")
elseif(PLATFORM_APPLE_VISIONOS)
	target_link_libraries(Renderer PRIVATE "-framework UIKit")
	target_link_libraries(Renderer PRIVATE "-framework PassKit")
	target_link_libraries(Renderer PRIVATE "-framework AVFoundation")
	target_link_libraries(Renderer PRIVATE "-framework AudioToolbox")
	target_link_libraries(Renderer PRIVATE "-framework CoreMotion")
	target_link_libraries(Renderer PRIVATE "-framework IOKit")
	target_link_libraries(Renderer PRIVATE "-framework IOSurface")

	set_target_properties(Renderer PROPERTIES
		RESOURCE "${RESOURCES}"
		XCODE_ATTRIBUTE_SWIFT_OBJC_BRIDGING_HEADER "${CMAKE_CURRENT_LIST_DIR}/Private/Window/Apple/AppDelegate-Bridging-Header.h"
	)
elseif(PLATFORM_APPLE_MACOS)
	target_link_libraries(Renderer PRIVATE "${CMAKE_CURRENT_LIST_DIR}/Public/Renderer/3rdparty/SDL2/lib/${PLATFORM_NAME}/${PLATFORM_ARCHITECTURE}/libSDL2.a")

	target_link_libraries(Renderer PRIVATE "-framework IOKit")
	target_link_libraries(Renderer PRIVATE "-framework IOSurface")
	target_link_libraries(Renderer PRIVATE "-framework AppKit")
	target_link_libraries(Renderer PRIVATE "-framework CoreAudio")
	target_link_libraries(Renderer PRIVATE "-framework AudioToolbox")
	target_link_libraries(Renderer PRIVATE "-framework ForceFeedback")
	target_link_libraries(Renderer PRIVATE "-framework Carbon")
	target_link_libraries(Renderer PRIVATE "iconv")
elseif(USE_SDL)
	if (PLATFORM_LINUX)
		find_package(SDL2 REQUIRED)
		target_link_libraries(Renderer PRIVATE SDL2::SDL2)
	else()
		target_link_libraries(Renderer PRIVATE "${CMAKE_CURRENT_LIST_DIR}/Public/Renderer/3rdparty/SDL2/lib/${PLATFORM_NAME}/${PLATFORM_ARCHITECTURE}/${CMAKE_SHARED_LIBRARY_PREFIX}SDL2${SDL_SHARED_LIBRARY_SUFFIX}")
		DeployBinaryDependency("${CMAKE_CURRENT_LIST_DIR}/Public/Renderer/3rdparty/SDL2/lib/${PLATFORM_NAME}/${PLATFORM_ARCHITECTURE}/${CMAKE_SHARED_LIBRARY_PREFIX}SDL2${CMAKE_SHARED_MODULE_SUFFIX}")
		
		configure_file("${CMAKE_CURRENT_LIST_DIR}/Public/Renderer/3rdparty/SDL2/include/SDL_config_${SDL_CONFIG_PLATFORM}.h" "${CMAKE_CURRENT_BINARY_DIR}/3rdparty/SDL2/include/SDL_config.h" COPYONLY)
		target_include_directories(Renderer PUBLIC "${CMAKE_CURRENT_BINARY_DIR}/3rdparty/SDL2/include/")
		target_include_directories(RendererAPI INTERFACE "${CMAKE_CURRENT_BINARY_DIR}/3rdparty/SDL2/include/")
		target_include_directories(Renderer PUBLIC "${CMAKE_CURRENT_LIST_DIR}/Public/Renderer/3rdparty/SDL2/include/")
		target_include_directories(RendererAPI INTERFACE "${CMAKE_CURRENT_LIST_DIR}/Public/Renderer/3rdparty/SDL2/include/")
	endif()
endif()

if(PLATFORM_WINDOWS)
	DeployBinaryDependency("${CMAKE_CURRENT_LIST_DIR}/Private/3rdparty/renderdoc/lib/${PLATFORM_NAME}/${PLATFORM_ARCHITECTURE}/${CMAKE_SHARED_LIBRARY_PREFIX}renderdoc${CMAKE_SHARED_MODULE_SUFFIX}")
endif()

MakeUnitTests(Renderer Renderer)
if(OPTION_BUILD_UNIT_TESTS)
	target_link_libraries(RendererUnitTests PRIVATE Common)
	target_link_libraries(RendererUnitTests PRIVATE Engine)
endif()

if(PLATFORM_APPLE) 
    set_source_files_properties("${CMAKE_CURRENT_LIST_DIR}/Private/Window/Surface.cpp" PROPERTIES LANGUAGE OBJCXX)
	set_source_files_properties("${CMAKE_CURRENT_LIST_DIR}/Private/Window/Window.cpp" PROPERTIES LANGUAGE OBJCXX)
	set_source_files_properties("${CMAKE_CURRENT_LIST_DIR}/Private/Wrappers/ImageMapping.cpp" PROPERTIES LANGUAGE OBJCXX)
	set_source_files_properties("${CMAKE_CURRENT_LIST_DIR}/Private/Assets/Shader/ShaderCache.cpp" PROPERTIES LANGUAGE OBJCXX)
	set_source_files_properties("${CMAKE_CURRENT_LIST_DIR}/Private/Jobs/QueueSubmissionJob.cpp" PROPERTIES LANGUAGE OBJCXX)
	set_source_files_properties("${CMAKE_CURRENT_LIST_DIR}/Private/RenderOutput/SwapchainOutput.cpp" PROPERTIES LANGUAGE OBJCXX)
endif()