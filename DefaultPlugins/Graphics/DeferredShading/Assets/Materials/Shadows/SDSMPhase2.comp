#version 450
#extension GL_EXT_samplerless_texture_functions : enable

#define MAXIMUM_CASCADES 4

struct PerViewInfo
{
	mat4 viewMatrix;
	mat4 projectionMatrix;
	mat4 viewProjectionMatrix;
	mat4 viewProjectionMatrixCylinderBillboard;
	mat4 viewProjectionMatrixSphericalBillboard;
	mat4 invertedViewProjectionMatrix;
	mat4 invertedViewMatrix;
	mat4 invertedProjectionMatrix;

	vec4 viewLocationAndTime;
	mat3 viewRotation;
	mat3 invertedViewRotation;
	uvec4 renderAndOutputResolution;
	vec4 jitterOffset;
};

const uint baseSetIndex = HAS_PUSH_CONSTANTS == 1 ? 0 : 1;
#if HAS_PUSH_CONSTANTS
layout(push_constant) uniform PushConstants
#else
layout (binding = 0) buffer readonly PushConstants
#endif
{
	layout(offset = 0) uint DirectionalLightIndex;
} pushConstants;

layout(std140, set = baseSetIndex, binding = 0) uniform readonly ViewInfo
{
	PerViewInfo current;
	PerViewInfo previous;
} viewInfo;

layout(set = baseSetIndex + 1, binding = 0) uniform texture2D DepthBuffer;

#if RENDERER_WEBGPU
layout(std430) struct Bounds
{
	int x;
	int y;
	int z;
	int w;
};
#endif

layout(std430) struct SDSMLightInfo
{
	mat4 ViewMatrix;
#if RENDERER_WEBGPU
	Bounds BoundMin[MAXIMUM_CASCADES];
	Bounds BoundMax[MAXIMUM_CASCADES];
#else
	ivec4 BoundMin[MAXIMUM_CASCADES];
	ivec4 BoundMax[MAXIMUM_CASCADES];
#endif
	vec4 CascadeSplits;
	vec3 LightDirection;
	float PSSMLambda;
	float MaxShadowRange;
};

layout(std430, set = baseSetIndex + 1, binding = 1) buffer SDSMLightInfoBuffer
{
	layout(offset = 0) SDSMLightInfo lights[];
} sdsmLightInfoBuffer;

vec3 DepthBufferToWorldSpacePosition( vec2 normalizedScreenCoord/*[-1 ; 1]*/, float depth )
{
	vec4 projectedWorldSpacePos = viewInfo.current.invertedViewProjectionMatrix * vec4(normalizedScreenCoord, depth, 1.0);
	return projectedWorldSpacePos.xyz / projectedWorldSpacePos.w;
}

float LinearizeDepth( float sampledDepth )
{
	return viewInfo.current.projectionMatrix[3][2] / (sampledDepth + viewInfo.current.projectionMatrix[2][2]);
}

#if RENDERER_WEBGPU
shared Bounds ThreadGroupCascadeMinBound[MAXIMUM_CASCADES];
shared Bounds ThreadGroupCascadeMaxBound[MAXIMUM_CASCADES];
#else
shared ivec3 ThreadGroupCascadeMinBound[MAXIMUM_CASCADES];
shared ivec3 ThreadGroupCascadeMaxBound[MAXIMUM_CASCADES];
#endif

layout(local_size_x=8, local_size_y=8) in;
void main()
{
	uint iLight = pushConstants.DirectionalLightIndex;

	if( gl_LocalInvocationID.y == 0 && gl_LocalInvocationID.x < MAXIMUM_CASCADES )
	{
#if RENDERER_WEBGPU
		ThreadGroupCascadeMinBound[gl_LocalInvocationID.x].x = 0x7FFFFFFF;
		ThreadGroupCascadeMinBound[gl_LocalInvocationID.x].y = 0x7FFFFFFF;
		ThreadGroupCascadeMinBound[gl_LocalInvocationID.x].z = 0x7FFFFFFF;
		ThreadGroupCascadeMaxBound[gl_LocalInvocationID.x].x = 0x80000000;
		ThreadGroupCascadeMaxBound[gl_LocalInvocationID.x].y = 0x80000000;
		ThreadGroupCascadeMaxBound[gl_LocalInvocationID.x].z = 0x80000000;
#else
		ThreadGroupCascadeMinBound[gl_LocalInvocationID.x] = ivec3(0x7FFFFFFF,0x7FFFFFFF,0x7FFFFFFF);
		ThreadGroupCascadeMaxBound[gl_LocalInvocationID.x] = ivec3(0x80000000,0x80000000,0x80000000);
#endif
	}

	barrier();

	const ivec2 res = textureSize( DepthBuffer, 0 );
	if(all(lessThan(ivec2(gl_GlobalInvocationID.xy), res)))
	{
		float sampledDepth = texelFetch( DepthBuffer, ivec2(gl_GlobalInvocationID.xy), 0 ).x;

		if(sampledDepth > 0.0)
		{
			// 0 - 1023
			// res = 1024

			vec2 ndc = vec2(gl_GlobalInvocationID.xy) / vec2(res-1);
			ndc = ndc * 2.0 - 1.0;

			vec3 wsPos = DepthBufferToWorldSpacePosition( ndc, sampledDepth );

			float vsDepth = LinearizeDepth(sampledDepth);

			//For each visible pixel (depthbuffer->worldSpacePos), find in which cascade it belong, then project the point in light space and find the optimal light space bounding box per cascade.

			vec4 lightSpacePos = sdsmLightInfoBuffer.lights[iLight].ViewMatrix * vec4( wsPos, 1.0 );
			lightSpacePos.xyz /= lightSpacePos.w;

			uint cascadeIndex = MAXIMUM_CASCADES - 1; //find which slice we fall in
			for( uint iCascade = 0 ; iCascade < MAXIMUM_CASCADES ; ++iCascade )
			{
				const vec4 cascadeSplit = sdsmLightInfoBuffer.lights[iLight].CascadeSplits;
				if( vsDepth < cascadeSplit[iCascade])
				{
					cascadeIndex = iCascade;
					break;
				}

			}

			//convert to fixed point representation (16.16) for atomics
			const ivec3 fpLightSpacePos = ivec3( lightSpacePos.xyz * 65536.0 );

			//do the atomic min/max in shared group memory to avoid spamming the global bound
			atomicMin( ThreadGroupCascadeMinBound[cascadeIndex].x, fpLightSpacePos.x );
			atomicMin( ThreadGroupCascadeMinBound[cascadeIndex].y, fpLightSpacePos.y );
			atomicMin( ThreadGroupCascadeMinBound[cascadeIndex].z, fpLightSpacePos.z );
			atomicMax( ThreadGroupCascadeMaxBound[cascadeIndex].x, fpLightSpacePos.x );
			atomicMax( ThreadGroupCascadeMaxBound[cascadeIndex].y, fpLightSpacePos.y );
			atomicMax( ThreadGroupCascadeMaxBound[cascadeIndex].z, fpLightSpacePos.z );
		}
	}

#if RENDERER_WEBGPU
	barrier();
#else
	memoryBarrierShared();
#endif

	// "merge" thread group bounds with global bounds
	if( gl_LocalInvocationID.y == 0 && gl_LocalInvocationID.x < MAXIMUM_CASCADES )
	{
		uint iCascade = gl_LocalInvocationID.x;

		atomicMin( sdsmLightInfoBuffer.lights[iLight].BoundMin[iCascade].x, ThreadGroupCascadeMinBound[iCascade].x );
		atomicMin( sdsmLightInfoBuffer.lights[iLight].BoundMin[iCascade].y, ThreadGroupCascadeMinBound[iCascade].y );
		atomicMin( sdsmLightInfoBuffer.lights[iLight].BoundMin[iCascade].z, ThreadGroupCascadeMinBound[iCascade].z );
		atomicMax( sdsmLightInfoBuffer.lights[iLight].BoundMax[iCascade].x, ThreadGroupCascadeMaxBound[iCascade].x );
		atomicMax( sdsmLightInfoBuffer.lights[iLight].BoundMax[iCascade].y, ThreadGroupCascadeMaxBound[iCascade].y );
		atomicMax( sdsmLightInfoBuffer.lights[iLight].BoundMax[iCascade].z, ThreadGroupCascadeMaxBound[iCascade].z );
	}
}