plugins {
    id 'com.android.application'
    id 'com.github.triplet.play'
}

ext.vvl_version='1.3.231.1'
apply from: "../download_vvl.gradle"

def engineJsonFile = file('../../../sceneri.ngine')
def parsedEngineJson = new groovy.json.JsonSlurper().parseText(engineJsonFile.text)

android {

    lint {
        abortOnError false
        checkReleaseBuilds false
    }
    compileSdk 35
    ndkVersion "25.1.8937393"
    namespace 'com.sceneri-core.App'

    sourceSets {
        main {
            manifest.srcFile 'Private/Android/AndroidManifest.xml'
            java.srcDirs += ['Private/Android/java']
            res.srcDirs += ['Private/Android/Resources']
            assets.srcDirs = ['PackagedAssets']
        }
    }

    defaultConfig {
        applicationId "com.sceneri-core.App"
        minSdkVersion 29
        targetSdkVersion 34
        versionCode 1
        versionName parsedEngineJson.version
        ndk.abiFilters 'arm64-v8a'

        externalNativeBuild {
            cmake {
                cppFlags '-std=c++17 -fuse-ld=lld'
                arguments "-DANDROID_ASSETS_DIRECTORIES=${android.sourceSets.main.assets.srcDirs[0]}"
                if (project.hasProperty("DISABLE_PACKAGE")) {
                    arguments += '-DOPTION_PACKAGE=OFF'
                }
                def targetDistribution = project.findProperty("TARGET_DISTRIBUTION") ?: "googleplay"
                arguments += "-DTARGET_DISTRIBUTION=${targetDistribution}"

                def targetEnvironment = project.findProperty("TARGET_ENVIRONMENT") ?: "internal_development"
                arguments += "-DTARGET_ENVIRONMENT=${targetEnvironment}"
                targets "Editor"
            }
        }
    }

    signingConfigs {
        release {
            storeFile file("Private/Android/googleplay.jks")
            storePassword System.getenv("ANDROID_SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("ANDROID_SIGNING_KEY_ALIAS")
            keyPassword System.getenv("ANDROID_SIGNING_KEY_PASSWORD")
        }
    }

    playConfigs {
        register("RelWithDebInfo") {
            enabled.set(true)
        }
    }

    externalNativeBuild {
        cmake {
            path file('../../CMakeLists.txt')
            version '3.22.1'
            buildStagingDirectory '../../../IntermediateAndroid'
        }
    }

    flavorDimensions 'abi'
    productFlavors {
        arm64 {
            dimension "abi"
            ndk.abiFilters 'arm64-v8a'
            externalNativeBuild {
                cmake {
                    arguments "-DPLATFORM_ARM=1", "-DPLATFORM_64BIT=1", "-DPLATFORM_ARCHITECTURE=arm64"
                }
            }
        }
        /*x86_64 {
            dimension "abi"
            ndk.abiFilters 'x86_64'
            externalNativeBuild {
                cmake {
                    arguments "-DPLATFORM_X86=1", "-DPLATFORM_64BIT=1", "-DPLATFORM_ARCHITECTURE=x64"
                }
            }
        }*/
    }
    buildTypes {
        DebugDevelopment {
            debuggable true
            jniDebuggable true
            minifyEnabled false
            externalNativeBuild {
                cmake {
                    arguments '-DCMAKE_BUILD_TYPE=DebugDevelopment'
                }
            }
            signingConfig debug.signingConfig
        }
        Profile {
            debuggable true
            minifyEnabled false
            externalNativeBuild {
                cmake {
                    arguments '-DCMAKE_BUILD_TYPE=Profile'
                }
            }
            signingConfig signingConfigs.debug
        }
        RelWithDebInfo {
            //proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            debuggable false
            minifyEnabled false
            externalNativeBuild {
                cmake {
                    arguments '-DCMAKE_BUILD_TYPE=RelWithDebInfo'
                }
            }
            signingConfig signingConfigs.release
        }
        applicationVariants.all{variant ->
            variant.outputs.each{output->
                def tempName = output.outputFile.name
                tempName = tempName.replace("Launchers-", "sceneri-")
                output.outputFileName  = tempName
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
        prefab true
    }
}

android.variantFilter { variant ->
    if(variant.buildType.name.equals('debug') ) {
        variant.setIgnore(true);
    }
    if(variant.buildType.name.equals('release') ) {
        variant.setIgnore(true);
    }
}

import com.github.triplet.gradle.androidpublisher.ResolutionStrategy

play {
    track = "internal"
    serviceAccountCredentials.set(file("Private/Android/apikey.json"))

    resolutionStrategy.set(ResolutionStrategy.AUTO)

    enabled.set(false)
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.core:core:1.15.0'
    implementation 'androidx.games:games-activity:4.0.0'
    implementation 'io.sentry:sentry-android:8.6.0'
    implementation "io.sentry:sentry-native-ndk:0.7.15"

    implementation "androidx.credentials:credentials:1.5.0"
    implementation "androidx.credentials:credentials-play-services-auth:1.5.0"
    implementation "com.google.android.libraries.identity.googleid:googleid:1.1.1"

    implementation 'com.appsflyer:af-android-sdk:6.16.2'
    implementation "com.android.installreferrer:installreferrer:2.2"
}
