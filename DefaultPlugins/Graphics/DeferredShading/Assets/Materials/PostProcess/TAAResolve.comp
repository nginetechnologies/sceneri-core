#version 450
#extension GL_EXT_samplerless_texture_functions : enable

const uint baseSetIndex = HAS_PUSH_CONSTANTS == 1 ? 0 : 1;
#if HAS_PUSH_CONSTANTS
layout(push_constant) uniform PushConstants
#else
layout (binding = 0) buffer readonly PushConstants
#endif
{
	layout(offset = 0) vec4 viewRatio;
} pushConstants;

layout(set = baseSetIndex, binding = 0) uniform texture2D compositeSceneTexture;
layout(set = baseSetIndex, binding = 1) uniform texture2D historyTexture;
// layout(set = baseSetIndex, binding = 2, rgba8) uniform writeonly image2D swapChain;
layout(set = baseSetIndex, binding = 2, rgba16f) uniform writeonly image2D intermediate;
layout(set = baseSetIndex, binding = 3) uniform sampler compositeSampler; // Nearest
layout(set = baseSetIndex, binding = 4) uniform sampler historySampler;   // Linear
layout(set = baseSetIndex, binding = 5) uniform texture2D velocityTexture;

layout(local_size_x=8, local_size_y=8) in;

// Store weight in w component
vec3 AdjustHDRColor(vec3 color)
{
    return vec3(color.x > 0.0 ? log(color.x) : -10.0, 
						color.y > 0.0 ? log(color.y) : -10.0, 
						color.z > 0.0 ? log(color.z) : -10.0); // Guard against nan
}

vec4 sample_catmull_rom(texture2D tex_history, vec2 uv, ivec2 texture_size)
{
    // based on: https://gist.github.com/TheRealMJP/c83b8c0f46b63f3a88a5986f4fa982b1
    
    // scale UV coordinates by the texture size to work in texel space
    vec2 sample_position = uv * texture_size;

    // calculate the center of the starting texel in a 4x4 grid. The grid's [1, 1] position.
    vec2 texPos1 = floor(sample_position - 0.5) + 0.5;

    // calculate the fractional part of the original sample position relative to the starting texel.
    vec2 fractional_offset = sample_position - texPos1;

    // calculate the Catmull-Rom weights for each axis using the fractional offset.
    vec2 w0 = fractional_offset * (-0.5 + fractional_offset * (1.0 - 0.5 * fractional_offset));
    vec2 w1 = 1.0f + fractional_offset * fractional_offset * (-2.5 + 1.5 * fractional_offset);
    vec2 w2 = fractional_offset * (0.5 + fractional_offset * (2.0 - 1.5 * fractional_offset));
    vec2 w3 = fractional_offset * fractional_offset * (-0.5 + 0.5 * fractional_offset);

    // combine weights for the middle two samples and calculate their combined offset.
    vec2 combinedWeightMiddleSamples = w1 + w2;
    vec2 combinedOffsetMiddleSamples = w2 / combinedWeightMiddleSamples;

    // calculate final UV coordinates for texture sampling.
    vec2 texPos0      = (texPos1 - 1) / texture_size;
    vec2 texPos3      = (texPos1 + 2) / texture_size;
    vec2 texPosMiddle = (texPos1 + combinedOffsetMiddleSamples) / texture_size;

    // sample the texture at the calculated UV coordinates and accumulate the results.
    vec4 result = vec4(0.0, 0.0, 0.0, 0.0);
    result += texture(sampler2D(tex_history, historySampler), vec2(texPos0.x, texPos0.y)) * w0.x * w0.y;
    result += texture(sampler2D(tex_history, historySampler), vec2(texPosMiddle.x, texPos0.y)) * combinedWeightMiddleSamples.x * w0.y;
    result += texture(sampler2D(tex_history, historySampler), vec2(texPos3.x, texPos0.y)) * w3.x * w0.y;

    result += texture(sampler2D(tex_history, historySampler), vec2(texPos0.x, texPosMiddle.y)) * w0.x * combinedWeightMiddleSamples.y;
    result += texture(sampler2D(tex_history, historySampler), vec2(texPosMiddle.x, texPosMiddle.y)) * combinedWeightMiddleSamples.x * combinedWeightMiddleSamples.y;
    result += texture(sampler2D(tex_history, historySampler), vec2(texPos3.x, texPosMiddle.y)) * w3.x * combinedWeightMiddleSamples.y;

    result += texture(sampler2D(tex_history, historySampler), vec2(texPos0.x, texPos3.y)) * w0.x * w3.y;
    result += texture(sampler2D(tex_history, historySampler), vec2(texPosMiddle.x, texPos3.y)) * combinedWeightMiddleSamples.x * w3.y;
    result += texture(sampler2D(tex_history, historySampler), vec2(texPos3.x, texPos3.y)) * w3.x * w3.y;

    return result;
}

void main()
{
	ivec2 res = textureSize(compositeSceneTexture, 0);
	ivec2 index =  ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(index) / vec2(res);

    // vec2 velocity = texture(sampler2D(velocityTexture, compositeSampler), uv).xy;
	vec2 velocity = texture(sampler2D(velocityTexture, historySampler), uv).xy;
    vec2 previousPixelPos = uv - velocity;

	// vec3 currentColor = AdjustHDRColor(texture(sampler2D(compositeSceneTexture, compositeSampler), uv).rgb);
	// vec3 historyColor = AdjustHDRColor(texture(sampler2D(historyTexture, historySampler), previousPixelPos).rgb);
	vec3 currentColor = texture(sampler2D(compositeSceneTexture, historySampler), uv).rgb; // Use linear sampling instead?
	// vec3 currentColor = texelFetch(compositeSceneTexture, index, 0).rgb;
	vec3 historyColor = texture(sampler2D(historyTexture, historySampler), previousPixelPos).rgb;
	// vec3 historyColor = texture(sampler2D(historyTexture, historySampler), uv).rgb;
	//vec3 historyColor = sample_catmull_rom(historyTexture, previousPixelPos, textureSize(historyTexture, 0)).rgb; // More fancy sampling for history buffer

	// // If the history color is too different from the color of the current sample or its neighbors, clamp it to their combined min/max
	// vec3 NearColor0 = AdjustHDRColor(textureOffset(sampler2D(compositeSceneTexture, compositeSampler), uv, ivec2(1, 0)).rgb).rgb;
	// vec3 NearColor1 = AdjustHDRColor(textureOffset(sampler2D(compositeSceneTexture, compositeSampler), uv, ivec2(0, 1)).rgb).rgb;
	// vec3 NearColor2 = AdjustHDRColor(textureOffset(sampler2D(compositeSceneTexture, compositeSampler), uv, ivec2(-1, 0)).rgb).rgb;
	// vec3 NearColor3 = AdjustHDRColor(textureOffset(sampler2D(compositeSceneTexture, compositeSampler), uv, ivec2(0, -1)).rgb).rgb;
	// vec3 BoxMin = min(currentColor, min(NearColor0, min(NearColor1, min(NearColor2, NearColor3))));
    // vec3 BoxMax = max(currentColor, max(NearColor0, max(NearColor1, max(NearColor2, NearColor3))));

	vec3 neighbors[9];
	neighbors[0] = texelFetchOffset(compositeSceneTexture, index, 0, ivec2(-1, -1)).rgb;
	neighbors[1] = texelFetchOffset(compositeSceneTexture, index, 0, ivec2(+0, -1)).rgb;
	neighbors[2] = texelFetchOffset(compositeSceneTexture, index, 0, ivec2(+1, -1)).rgb;
	neighbors[3] = texelFetchOffset(compositeSceneTexture, index, 0, ivec2(-1, +0)).rgb;
	neighbors[4] = texelFetchOffset(compositeSceneTexture, index, 0, ivec2(+0, +0)).rgb;
	neighbors[5] = texelFetchOffset(compositeSceneTexture, index, 0, ivec2(+1, +0)).rgb;
	neighbors[6] = texelFetchOffset(compositeSceneTexture, index, 0, ivec2(-1, +1)).rgb;
	neighbors[7] = texelFetchOffset(compositeSceneTexture, index, 0, ivec2(+0, +1)).rgb;
	neighbors[8] = texelFetchOffset(compositeSceneTexture, index, 0, ivec2(+1, +1)).rgb;
	vec3 nmin = vec3(9999.0, 9999.0, 9999.0);   
	vec3 nmax = vec3(-9999.0, -9999.0, -9999.0);   
	for(int i = 0; i < 9; ++i) {
		nmin = min(nmin, neighbors[i]);
		nmax = max(nmax, neighbors[i]);
	}

	// https://community.arm.com/arm-community-blogs/b/graphics-gaming-and-vr-blog/posts/temporal-anti-aliasing
	// "High VARIANCE_CLIPPING_GAMMA gives a better result overall but at the same time the ghosting artefact's are increased...
	//  Lower VARIANCE_CLIPPING_GAMMA removes more ghosting but it increases jittering. "
	// const float VARIANCE_CLIPPING_GAMMA = 1.0;
    
	// Compute the two moments
	// vec3 M1 = currentColor.rgb + neighbors[0] + neighbors[1] + neighbors[2] + neighbors[3] + neighbors[4] + neighbors[5] + neighbors[6] + neighbors[7] + neighbors[8];
	// vec3 M2 = currentColor.rgb * currentColor.rgb + neighbors[0] * neighbors[0] + neighbors[1] * neighbors[1] + neighbors[2] * neighbors[2] + neighbors[3] * neighbors[3] + neighbors[4] * neighbors[4] + neighbors[5] * neighbors[5] + neighbors[6] * neighbors[6] + neighbors[7] * neighbors[7] + neighbors[8] * neighbors[8];
	// vec3 MU = M1 / 5.0;
	// vec3 Sigma = sqrt(M2 / 5.0 - MU * MU);
	// vec3 BoxMin = MU - VARIANCE_CLIPPING_GAMMA * Sigma;
	// vec3 BoxMax = MU + VARIANCE_CLIPPING_GAMMA * Sigma;

	
	historyColor = clamp(historyColor, nmin, nmax);
	// historyColor = clamp(historyColor, BoxMin, BoxMax);
	float blend = 0.15;

	// Weight blend factor using the different of luminescence [Lottes12]
	// float Lum0 = ComputeLuminance(currentColor);
	// float Lum1 = ComputeLuminance(historyColor);
	// float Diff = abs(Lum0 - Lum1) / (EPSILON + max(Lum0, max(Lum1, ComputeLuminance(BoxMax))));
	// Diff = 1.0 - Diff;
	// Diff *= Diff;
		
	// blend *= Diff;

	
    vec3 color = currentColor * blend + historyColor * (1.0 - blend);
	// color.rgb = exp(color.rgb); // Undo log transformation
	
	vec4 outColor = vec4(color, 1.0);

	// For debug, just passthrough composite
	// vec4 outColor = vec4(texture(sampler2D(compositeSceneTexture, compositeSampler), uv).rgb, 1.0);
	// vec4 outColor = vec4(texture(sampler2D(compositeSceneTexture, historySampler), uv).rgb, 1.0);
	imageStore( intermediate, index, outColor );
}
